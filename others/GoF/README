1.单一职责原则：就一个类而言，应该仅有一个引起它变化的原因。
（1）如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其它职责的能力。
（2）软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。
（3）如果你能够想到多余一个动机去改变一个类，那么这个类就具有多于一个的职责。

2.开放-封闭原则：软件实体（类/模块/函数等等）应该可以扩展，但是不可以修改。
（1）对于扩展是开放的，对于修改是封闭的。
（2）先猜测出最有可能发生的变化种类，然后“构造抽象”来隔离那些变化——同类变化。
（3）面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码。
（4）拒绝不成熟的抽象和抽象本身一样重要。

3.依赖倒转原则：
（1）高层模块不应该依赖低层模块。两个都应该依赖抽象。
（2）抽象不应该依赖细节。细节应该依赖抽象。<=>针对接口编程，不要对实现编程。

4.里氏代换原则：子类型必须能够替换掉它们的父类型。
（1）一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它觉察不出父类对象和子类对象的区别。
（2）在软件里面，把父类都替换成它的子类，程序的行为不会发生变化。

总结3，4：依赖倒转其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写是考虑的都是如何针对
          抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，
          反之那就是过程化的设计了。

5.迪米特法则：如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的
某一个方法的话，可以通过第三者转发这个调用。

